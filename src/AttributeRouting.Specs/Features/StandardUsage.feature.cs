// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Standard Usage")]
    public partial class StandardUsageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StandardUsage.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Standard Usage", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes for an MVC controller")]
        [NUnit.Framework.TestCaseAttribute("GET", "Index", "", null)]
        [NUnit.Framework.TestCaseAttribute("HEAD", "Index", "", null)]
        [NUnit.Framework.TestCaseAttribute("POST", "Create", "Create", null)]
        [NUnit.Framework.TestCaseAttribute("PUT", "Update", "Update/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("DELETE", "Destroy", "Destroy/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("GET", "Wildcards", "Wildcards/{*pathInfo}", null)]
        [NUnit.Framework.TestCaseAttribute("", "AnyVerb", "AnyVerb", null)]
        [NUnit.Framework.TestCaseAttribute("GET", "GetDefault", "GetDefault", null)]
        [NUnit.Framework.TestCaseAttribute("HEAD", "GetDefault", "GetDefault", null)]
        [NUnit.Framework.TestCaseAttribute("PUT", "PutDefault", "PutDefault", null)]
        [NUnit.Framework.TestCaseAttribute("POST", "PostDefault", "PostDefault", null)]
        [NUnit.Framework.TestCaseAttribute("DELETE", "DeleteDefault", "DeleteDefault", null)]
        [NUnit.Framework.TestCaseAttribute("", "RouteDefault", "RouteDefault", null)]
        public virtual void GeneratingRoutesForAnMVCController(string method, string action, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes for an MVC controller", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("I have registered the routes for the StandardUsageController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When(string.Format("I fetch the routes for the StandardUsageController\'s {0} action", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then(string.Format("the route is constrained to {0} requests", method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
  testRunner.And(string.Format("the route url is \"{0}\"", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
  testRunner.And("the default for \"controller\" is \"StandardUsage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
  testRunner.And("the namespace is \"AttributeRouting.Specs.Subjects\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.And("the route has a data token for \"actionMethod\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes for an API controller")]
        [NUnit.Framework.TestCaseAttribute("GET", "Get", "api", null)]
        [NUnit.Framework.TestCaseAttribute("HEAD", "Get", "api", null)]
        [NUnit.Framework.TestCaseAttribute("OPTIONS", "Get", "api", null)]
        [NUnit.Framework.TestCaseAttribute("POST", "Post", "api", null)]
        [NUnit.Framework.TestCaseAttribute("OPTIONS", "Post", "api", null)]
        [NUnit.Framework.TestCaseAttribute("PUT", "Put", "api/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("OPTIONS", "Put", "api/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("DELETE", "Delete", "api/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("OPTIONS", "Delete", "api/{id}", null)]
        [NUnit.Framework.TestCaseAttribute("GET", "Wildcards", "api/Wildcards/{*pathInfo}", null)]
        [NUnit.Framework.TestCaseAttribute("", "AnyVerb", "api/AnyVerb", null)]
        public virtual void GeneratingRoutesForAnAPIController(string method, string action, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes for an API controller", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have registered the routes for the HttpStandardUsageController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When(string.Format("I fetch the routes for the HttpStandardUsage controller\'s {0} action", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then(string.Format("the route is constrained to {0} requests", method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
  testRunner.And(string.Format("the route url is \"{0}\"", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
  testRunner.And("the default for \"controller\" is \"HttpStandardUsage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
  testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
  testRunner.And("the namespace is \"AttributeRouting.Specs.Subjects.Http\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
  testRunner.And("the route has a data token for \"actionMethod\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Responding to OPTIONS requests in an API controller")]
        public virtual void RespondingToOPTIONSRequestsInAnAPIController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Responding to OPTIONS requests in an API controller", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("I have registered the routes for the HttpStandardUsageController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.When("an OPTIONS request for \"api\" is made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("the Get action is matched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
